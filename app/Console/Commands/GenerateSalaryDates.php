<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Log;
use config;
use App\Jobs\GenerateCSV;
use App\Services\Contracts\SalaryInterface;

class GenerateSalaryDates extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'generate-salary-dates 
                            {filename : File name to export the salary dates} 
                            {--S|start= : Optional start date to compute salary dates starting from =} 
                            {--E|end= : Optional end date to computer salary dates upto this end date = }';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Generates salary dates between given dates and export into a CSV file.';

    /**
     * Execute the console command.
     *
     * @return mixed
     * This will suppress CyclomaticComplexity and NPathComplexity
     * warnings in this method
     *
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     * @SuppressWarnings(PHPMD.NPathComplexity)
     *
     * Reduced the complexity of this function as much as possible.
     * Suppressing cyclomatic complexity and NpathComplexity as all the conditions are necessary for code coverage
     * Currently this function has complexity of 11
     */
    public function handle(SalaryInterface $salaryService)
    {
        $fileName = $this->argument('filename');
        $startDate = ($this->option('start')) ? $this->option('start') : null;
        $endDate = ($this->option('end')) ? $this->option('end') : null;
        $dateFormat = config('app.date_format');
        Log::info('Starting to generate salary dates...');
        Log::info('These are the given arguments and options:');
        Log::info('Filename : '.$fileName);
        Log::info('Start Date:'.$startDate);
        Log::info('End Date: '.$endDate);
        Log::info('Date Format: '.$dateFormat);

        // Set default values for months and currentmonth if startdate and enddate not given
        $numMonths = 12;
        $startMonth = date('Y-m').'-01'; // setting default startMonth
        $validStartDate = false;
        $validEndDate = false;
        
        // check if start date is given and valid
        if ($startDate != null) {
            if ($salaryService->isValidDateFormat($startDate, $dateFormat) != true) {
                Log::error('Invalid start date format.');
                return;
            }
            $validStartDate = true;
            $parseStartDate = date_parse_from_format($dateFormat, $startDate);
            $startMonth = $parseStartDate['year'].'-'.$parseStartDate['month'].'-01'; // Set Month and Year
        }
        // check if end date is given and valid
        if ($endDate != null) {
            if ($salaryService->isValidDateFormat($endDate, $dateFormat) != true) {
                Log::error('Invalid end date format.');
                return;
            }
            // end date is given and is valid
            $validEndDate = true;
            $parseEndDate = date_parse_from_format($dateFormat, $endDate);
            $endMonth = $parseEndDate['year'].'-'.$parseEndDate['month'].'-01'; // Set Month and Year
            $startMonthObj = new \Datetime($startMonth);
            $endMonthObj = new \Datetime($endMonth);
            if ($startMonthObj > $endMonthObj) {
                Log::error('Sorry, end date should be greater than start date.');
                return;
            }
        }
        
        if ($validStartDate && $validEndDate) { // calculate no. of months if either start or end date is valid
            $numMonths = $salaryService->diffInMonths(new \Datetime($startMonth), new \Datetime($endMonth));
            Log::debug('Number of Months: '.$numMonths);
            if ($numMonths < 1) {
                Log::warn('Start and end date is too closer. Please try again with different dates.');
                return;
            }
        }
        
        $paySalaries = array();
        $paySalaries = $salaryService->generateDatesData($startMonth, $numMonths);
            
        Log::debug("Request to generate CSV with Queues Begins");
        generateCSV::dispatch($paySalaries, $fileName)
                ->delay(now()->addSeconds(10)); // dispatch a job with 10 sec delay
        Log::debug("Request to generate CSV with Queues Ends");
        Log::info('Salary payment dates will be generated by jobs...');
        Log::info('please run php artisan queue:listen to run the jobs');
        Log::info('You can download the generated file from this location: '.public_path().'\\'.$fileName.'.csv');
    }
}
